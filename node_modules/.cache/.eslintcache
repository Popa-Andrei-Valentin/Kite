[{"C:\\Users\\Popa Andrei\\Desktop\\kite-surfing\\kite\\src\\index.js":"1","C:\\Users\\Popa Andrei\\Desktop\\kite-surfing\\kite\\src\\App.js":"2","C:\\Users\\Popa Andrei\\Desktop\\kite-surfing\\kite\\src\\reportWebVitals.js":"3","C:\\Users\\Popa Andrei\\Desktop\\kite-surfing\\kite\\src\\components\\Spots.js":"4","C:\\Users\\Popa Andrei\\Desktop\\kite-surfing\\kite\\src\\components\\Table.js":"5","C:\\Users\\Popa Andrei\\Desktop\\kite-surfing\\kite\\src\\components\\Button.js":"6","C:\\Users\\Popa Andrei\\Desktop\\kite-surfing\\kite\\src\\components\\Login.js":"7"},{"size":219,"mtime":1649941301031,"results":"8","hashOfConfig":"9"},{"size":12756,"mtime":1650135171185,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1649763586360,"results":"11","hashOfConfig":"9"},{"size":3695,"mtime":1650135996164,"results":"12","hashOfConfig":"9"},{"size":5091,"mtime":1650136508343,"results":"13","hashOfConfig":"9"},{"size":170,"mtime":1650036140051,"results":"14","hashOfConfig":"9"},{"size":1264,"mtime":1650136130352,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"g1xpmq",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Popa Andrei\\Desktop\\kite-surfing\\kite\\src\\index.js",[],[],[],"C:\\Users\\Popa Andrei\\Desktop\\kite-surfing\\kite\\src\\App.js",["42","43","44","45","46","47","48"],[],"import Spots from \"./components/Spots\";\nimport Table from \"./components/Table\";\nimport \"./App.css\";\nimport \"./components/Nav.css\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport React, { useState, useEffect } from \"react\";\nimport { BsFilterLeft } from \"react-icons/bs\";\nimport Login from \"./components/Login\";\n\nfunction App() {\n  const [spot, setSpots] = useState(null);\n  const [spotTemp, setSpotTemp] = useState();\n  // For loggedin status\n  const [login, setLogin] = useState();\n  // For -- ADD SPOT -- //\n  const [showModal, setShowModal] = useState(false);\n  const [date, setDate] = useState();\n  const [name, setLocation] = useState();\n  const [country, setCountry] = useState();\n  // ---- //\n\n  // For -- FILTER -- //\n  const [filterModal, setFilterModal] = useState(false);\n  const [filterValue, setFilterValue] = useState();\n  const [filterValueWind, setFilterValueWind] = useState();\n  const [filterOn, setFilterOn] = useState();\n  // ---- //\n\n  // Add spot modal state\n  const [addSpot, setAddSpot] = useState(false);\n\n  // Fetching Spots Data\n  useEffect(() => {\n    const getSpots = async () => {\n      const spotsFromServer = await fetchSpots();\n      const loginFromServer = await fetchLogin(1);\n      setLogin(loginFromServer.loggedin);\n      setSpots(spotsFromServer);\n      setSpotTemp(spot);\n    };\n    getSpots();\n  }, []);\n\n  const fetchSpots = async () => {\n    const res = await fetch(\"https://6255722e8646add390d70c22.mockapi.io/spot\");\n    const data = await res.json();\n    return data;\n  };\n\n  // Fetch Spots by id\n  const fetchSpotsById = async (id) => {\n    const res = await fetch(\n      `https://6255722e8646add390d70c22.mockapi.io/spot/${id}`\n    );\n    const data = await res.json();\n    return data;\n  };\n\n  // -- ADD SPOT -- //\n  const handleSubmit = async (e) => {\n    var arr = date.split(\"-\");\n    var months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    var month_index = parseInt(arr[1], 10) - 1;\n    const month = months[month_index];\n\n    const spotTemp = { name, country, month };\n\n    const result = await fetch(\n      \"https://6255722e8646add390d70c22.mockapi.io/spot\",\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(spotTemp),\n      }\n    );\n    const data = await result.json();\n    setSpots([...spot, data]);\n    setSpotTemp(spot);\n    setShowModal(false);\n  };\n  // ---- //\n  const letters = /[a-zA-Z]/;\n\n  // -- FILTER DATA AND DISPLAY FUNCTION -- //\n  const filtered = () => {\n    if (letters.test(filterValue)) {\n      setSpotTemp(spot);\n      setSpots(spot.filter((e) => e.country === filterValue));\n    }\n  };\n\n  // ---- //\n  // Fetch Login INFO\n  const fetchLogin = async (id) => {\n    const res = await fetch(\n      `https://6255722e8646add390d70c22.mockapi.io/login/${id}`\n    );\n    const data = await res.json();\n    // setLogin(data.loggedin);\n    return data;\n  };\n\n  const toggleLogin = async (id) => {\n    const toToggle = await fetchLogin(id);\n    const updateLogin = { ...toToggle, loggedin: !toToggle.loggedin };\n\n    const res = await fetch(\n      `https://6255722e8646add390d70c22.mockapi.io/login/${id}`,\n      {\n        method: \"PUT\",\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify(updateLogin),\n      }\n    );\n    const data = await res.json();\n    console.log(data.loggedin);\n    setLogin(data.loggedin);\n  };\n  // Toggle Favourite\n\n  const toggleFavorite = async (id) => {\n    const spotToToggle = await fetchSpotsById(id);\n    const updSpot = { ...spotToToggle, favourite: !spotToToggle.favourite };\n\n    const res = await fetch(\n      `https://6255722e8646add390d70c22.mockapi.io/spot/${id}`,\n      {\n        method: \"PUT\",\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify(updSpot),\n      }\n    );\n\n    const data = await res.json();\n\n    setSpots(\n      spot.map((spot) =>\n        spot.id === id\n          ? {\n              ...spot,\n              favourite: data.favourite,\n            }\n          : spot\n      )\n    );\n  };\n  // LEAFLET\n  const outerBounds = [\n    [50.505, -29.09],\n    [52.505, 29.09],\n  ];\n\n  return (\n    <div>\n      {login === false ? <Login toggleLogin={toggleLogin} /> : null}\n      {/* Logo + Add Spot Button + Sign Out Button */}\n      <div className=\"nav-container\">\n        <h1 className=\"p-2 font-bold\">Kite</h1>\n        <div className=\"right-0 space-x-4\">\n          {/* -- Add Spot Button -- */}\n          <button\n            className=\"bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded\"\n            type=\"button\"\n            onClick={() => setShowModal(true)}\n          >\n            Add Spot\n          </button>\n          {showModal ? (\n            <>\n              <div className=\"w-100 justify-center items-center flex overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none\">\n                <div className=\"relative w-auto my-6 mx-auto max-w-3xl\">\n                  {/*content*/}\n                  <div className=\"border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none\">\n                    {/*header*/}\n                    <div className=\"flex items-start justify-between p-5 border-b border-solid border-slate-200 rounded-t\">\n                      <h3 className=\"text-3xl font-semibold\">Add New Spot</h3>\n                      <button\n                        className=\"p-1 ml-auto bg-transparent border-0 text-black opacity-5 float-right text-3xl leading-none font-semibold outline-none focus:outline-none\"\n                        onClick={() => setShowModal(false)}\n                      >\n                        <span className=\"bg-transparent text-black opacity-5 h-6 w-6 text-2xl block outline-none focus:outline-none\">\n                          Ã—\n                        </span>\n                      </button>\n                    </div>\n                    {/*body*/}\n                    <div className=\"relative p-6 flex-auto\">\n                      <p className=\"p-2 font-semibold\">Location Name</p>\n                      <input\n                        className=\"px-2 py-1 border-2 rounded-md \"\n                        type=\"text\"\n                        placeholder=\"Enter location name...\"\n                        onChange={(e) => {\n                          let temp = e.target.value.toLocaleString(\"en-us\", {\n                            month: \"long\",\n                          });\n                          setLocation(temp);\n                        }}\n                      ></input>\n                      <p className=\"p-2 font-semibold \">Country</p>\n                      <input\n                        className=\"px-2 py-1 border-2 rounded-md\"\n                        type=\"text\"\n                        placeholder=\"Enter country...\"\n                        onChange={(e) => {\n                          setCountry(e.target.value);\n                          console.log(/\\d/.test(filterValueWind));\n                        }}\n                      ></input>\n                      <p className=\"p-2 font-semibold\">When to go </p>\n                      {/* Date picker */}\n                      <p className=\"font-semibold\">from</p>\n                      <input\n                        className=\"bpx-2 py-1 border-2 rounded-md\"\n                        type=\"date\"\n                        onChange={(e) => {\n                          setDate(e.target.value);\n                        }}\n                      />\n                      <p className=\"font-semibold\">to</p>\n                      <input\n                        className=\"bpx-2 py-1 border-2 rounded-md\"\n                        type=\"date\"\n                      />\n                    </div>\n\n                    {/*Button (add spot) footer*/}\n                    <div className=\"flex items-center justify-end p-6 border-t border-solid border-slate-200 rounded-b\">\n                      <button\n                        className=\"text-red-500 background-transparent font-bold uppercase px-6 py-2 text-sm outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150\"\n                        type=\"button\"\n                        onClick={() => setShowModal(false)}\n                      >\n                        Close\n                      </button>\n                      <button\n                        className=\"bg-emerald-500 text-white active:bg-emerald-600 font-bold uppercase text-sm px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150\"\n                        type=\"button\"\n                        onClick={() => {\n                          handleSubmit();\n                        }}\n                      >\n                        Save Changes\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"opacity-25 fixed inset-0 z-40 bg-black\"></div>\n            </>\n          ) : null}\n          <button\n            className=\"bg-transparent hover:bg-red-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded\"\n            onClick={() => {\n              toggleLogin(1);\n            }}\n          >\n            Sign out\n          </button>\n        </div>\n      </div>\n      {/* //---// */}\n      {/* Leaflet contaienr start*/}\n      <div className=\"map\">\n        {/* Filter on map */}\n        <div>\n          <button\n            className=\"absolute z-10 px-5 py-1 right-0 mr-8 top-20 bg-white  shadow-md hover:shadow-xl hover:bg-blue-500 hover:text-white inline-block font-normal text-normal \"\n            onClick={() => {\n              if (filterModal) setFilterModal(false);\n              else {\n                setFilterModal(true);\n              }\n            }}\n          >\n            FILTERS <BsFilterLeft className=\"inline \" />\n          </button>\n\n          {/* Filter on CLICK modal */}\n          {filterModal && (\n            <div\n              className=\"absolute z-10 bg-white shadow-md \n         px-5 py-2 right-0 mr-6 top-[7.5rem]\"\n            >\n              <p>Country</p>\n              <input\n                className=\"py-1 my-2\"\n                type=\"text\"\n                placeholder=\"Enter country...\"\n                onChange={(e) => {\n                  setFilterValue(e.target.value);\n                }}\n              />\n              {/* <p>Wind Prob.</p>\n              <input\n                className=\"py-1 my-2\"\n                type=\"text\"\n                placeholder=\"Enter wind...\"\n                onChange={(e) => {\n                  setFilterValueWind(e.target.value);\n                }}\n              /> */}\n              <br />\n              <button\n                className=\" px-2 py-2 bg-white text-blue-500 border-2 rounded hover:bg-blue-500 hover:text-white inline-block font-medium text-sm \"\n                onClick={() => {\n                  setFilterOn(true);\n                  filtered();\n                }}\n              >\n                APPLY FILTERS\n              </button>\n              <button\n                className=\" px-2 py-2 bg-white text-blue-500 border-2 rounded hover:bg-blue-500 hover:text-white inline-block font-medium text-sm \"\n                onClick={() => {\n                  if (filterOn) setSpots(spotTemp);\n                }}\n              >\n                DELETE FILTERS\n              </button>\n            </div>\n          )}\n\n          {/* //--// */}\n        </div>\n        {/* //---// */}\n        <MapContainer\n          center={{ lat: 51.505, lng: -0.09 }}\n          zoom={3}\n          maxZoom={10}\n          zoomOut={1}\n          className=\"map\"\n        >\n          <TileLayer\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://tiles.stadiamaps.com/tiles/outdoors/{z}/{x}/{y}{r}.png\"\n            noWrap={true}\n            // url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          <Spots\n            spot={spot}\n            fetchSpots={fetchSpots}\n            toggleFavorite={toggleFavorite}\n            setSpots={setSpots}\n          />\n        </MapContainer>\n      </div>\n      {/* Leaftlet container end */}\n\n      {login === true ? (\n        <Table spot={spot} setSpots={setSpots} fetchSpots={fetchSpots} />\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Popa Andrei\\Desktop\\kite-surfing\\kite\\src\\reportWebVitals.js",[],[],[],"C:\\Users\\Popa Andrei\\Desktop\\kite-surfing\\kite\\src\\components\\Spots.js",["49","50","51","52","53","54"],[],"import { text } from \"@fortawesome/fontawesome-svg-core\";\r\nimport L from \"leaflet\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport Button from \"./Button\";\r\n\r\nconst Spots = ({ spot, fetchSpots, toggleFavorite, setSpots }) => {\r\n  var goldIcon = new L.Icon({\r\n    iconUrl:\r\n      \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-gold.png\",\r\n    shadowUrl:\r\n      \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png\",\r\n    iconSize: [25, 41],\r\n    iconAnchor: [12, 41],\r\n    popupAnchor: [1, -34],\r\n    shadowSize: [41, 41],\r\n  });\r\n  var blueIcon = new L.Icon({\r\n    iconUrl:\r\n      \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png\",\r\n    shadowUrl:\r\n      \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png\",\r\n    iconSize: [25, 41],\r\n    iconAnchor: [12, 41],\r\n    popupAnchor: [1, -34],\r\n    shadowSize: [41, 41],\r\n  });\r\n\r\n  useEffect(() => {\r\n    const getSpots = async () => {\r\n      const spotsFromServer = await fetchSpots();\r\n\r\n      setSpots(spotsFromServer);\r\n    };\r\n    getSpots();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {Array.isArray(spot)\r\n        ? spot.map((spot) => (\r\n            <Marker\r\n              key={spot.id}\r\n              position={[spot.lat, spot.long]}\r\n              icon={spot.favourite ? goldIcon : blueIcon}\r\n            >\r\n              <Popup>\r\n                <h1 className=\"font-sans font-bold text-base\">{spot.name}</h1>\r\n                <h3 className=\"font-sans font-bold text-base\">\r\n                  {spot.country}\r\n                </h3>\r\n                <p className=\"font-sans font-medium text-slate-400  m-0\">\r\n                  WIND PROBABILITY:\r\n                  <br />\r\n                  <span className=\"font-sans font-bold text-base text-black\">\r\n                    {spot.probability}%\r\n                  </span>\r\n                </p>\r\n\r\n                <p className=\"font-sans font-medium text-slate-400  m-0\">\r\n                  LONGITUDE:\r\n                  <br />\r\n                  <span className=\"font-sans font-bold text-base text-black\">\r\n                    {spot.long}\r\n                  </span>\r\n                </p>\r\n                <p className=\"font-sans font-medium text-slate-400  m-0\">\r\n                  LATITUDE:\r\n                  <br />\r\n                  <span className=\"font-sans font-bold text-base text-black\">\r\n                    {spot.lat}\r\n                  </span>\r\n                </p>\r\n                <p className=\"font-sans font-medium text-slate-400  m-0\">\r\n                  WHEN TO GO:\r\n                  <br />\r\n                  <span className=\"font-sans font-bold text-base text-black\">\r\n                    {spot.month}\r\n                  </span>\r\n                </p>\r\n                {/* Favorite OR Delete favorite btn */}\r\n\r\n                <button\r\n                  className={\r\n                    spot.favourite\r\n                      ? \"bg-red-400 font-sans text-black text-base rounded px-2 py-[0.15rem] hover:bg-red-500\"\r\n                      : \"bg-yellow-400 font-sans text-black text-base rounded px-2 py-[0.15rem] hover:bg-yellow-500\"\r\n                  }\r\n                  onClick={() => {\r\n                    toggleFavorite(spot.id);\r\n                  }}\r\n                >\r\n                  {spot.favourite\r\n                    ? \"Delete from favourite\"\r\n                    : \"Add to favourite\"}\r\n                </button>\r\n              </Popup>\r\n            </Marker>\r\n          ))\r\n        : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Spots;\r\n","C:\\Users\\Popa Andrei\\Desktop\\kite-surfing\\kite\\src\\components\\Table.js",["55","56","57","58","59","60"],[],"import { useState, useEffect } from \"react\";\r\nimport { BsArrowDownShort, BsArrowUpShort } from \"react-icons/bs\";\r\n\r\nconst Table = ({ spot, setSpots, fetchSpots }) => {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [order, setOrder] = useState(\"ASC\");\r\n  const [orderArrow, setArrow] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const getSpots = async () => {\r\n      const spotsFromServer = await fetchSpots();\r\n\r\n      setSpots(spotsFromServer);\r\n    };\r\n    getSpots();\r\n  }, []);\r\n  // Sorting function\r\n  const sorting = (col) => {\r\n    if (order === \"ASC\") {\r\n      const sorted = [...spot].sort((a, b) =>\r\n        a[col].toLowerCase() > b[col].toLowerCase() ? 1 : -1\r\n      );\r\n      setSpots(sorted);\r\n      setArrow(\"up\");\r\n      setOrder(\"DSC\");\r\n    }\r\n    if (order === \"DSC\") {\r\n      const sorted = [...spot].sort((a, b) =>\r\n        a[col].toLowerCase() < b[col].toLowerCase() ? 1 : -1\r\n      );\r\n      setSpots(sorted);\r\n      setArrow(\"down\");\r\n      setOrder(\"ASC\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"flex flex-col items-center justify-center pt-7\">\r\n        <h1 className=\"text-2xl font-semibold pb-2\">Locations</h1>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search name,country & month...\"\r\n          className=\"p-2  border-2 rounded-md\"\r\n          onChange={(event) => {\r\n            setSearchTerm(event.target.value);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\" flex justify-center py-7 relative overflow-x-auto shadow-md sm:rounded-lg \">\r\n        <table className=\"w-[95vw] text-sm text-left text-gray-500 dark:text-gray-400\">\r\n          <thead className=\"text-xs  bg-gray-700 text-gray-400\">\r\n            <tr>\r\n              <th\r\n                className=\"px-6 py-3 cursor-pointer\"\r\n                onClick={() => sorting(\"name\")}\r\n              >\r\n                NAME\r\n              </th>\r\n              <th\r\n                className=\"px-6 py-3 cursor-pointer\"\r\n                onClick={() => sorting(\"country\")}\r\n              >\r\n                COUNTRY\r\n              </th>\r\n              <th\r\n                className=\"px-6 py-3 cursor-pointer\"\r\n                onClick={() => sorting(\"lat\")}\r\n              >\r\n                LATITUDE\r\n              </th>\r\n              <th\r\n                className=\"px-6 py-3 cursor-pointer\"\r\n                onClick={() => sorting(\"long\")}\r\n              >\r\n                LONGITUDE\r\n              </th>\r\n              <th\r\n                className=\"px-6 py-3 cursor-not-allowed\"\r\n                onClick={() => sorting(\"probability\")}\r\n              >\r\n                WIND PROB.\r\n              </th>\r\n              <th\r\n                className=\"px-6 py-3 cursor-pointer\"\r\n                onClick={() => sorting(\"month\")}\r\n              >\r\n                WHEN TO GO\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody className=\"bg-gray-800 border-b border-gray-700 hover:bg-gray-50\">\r\n            {/* Checking if API fetch is done */}\r\n            {Array.isArray(spot)\r\n              ? spot\r\n                  .filter((spot) => {\r\n                    // Search function\r\n                    if (searchTerm == \"\") {\r\n                      return spot;\r\n                    } else if (\r\n                      // Searching location name\r\n                      spot.name\r\n                        .toLowerCase()\r\n                        .includes(searchTerm.toLowerCase()) ||\r\n                      // Searching location country\r\n                      spot.country\r\n                        .toLowerCase()\r\n                        .includes(searchTerm.toLowerCase()) ||\r\n                      // Searching month to go\r\n                      spot.month\r\n                        .toLowerCase()\r\n                        .includes(searchTerm.toLowerCase())\r\n                    ) {\r\n                      return spot;\r\n                    }\r\n                  })\r\n                  .map((spot) => (\r\n                    <tr\r\n                      key={spot.id}\r\n                      className={\r\n                        spot.favourite ? \"bg-yellow-300\" : \"bg-gray-200\"\r\n                      }\r\n                    >\r\n                      <th className=\"px-6 py-4 font-medium text-gray-900  whitespace-nowrap\">\r\n                        {spot.name}\r\n                      </th>\r\n                      <td className=\"px-6 py-4 text-gray-700\">\r\n                        {spot.country}\r\n                      </td>\r\n                      <td className=\"px-6 py-4 text-gray-700\">{spot.lat}</td>\r\n                      <td className=\"px-6 py-4 text-gray-700\">{spot.long}</td>\r\n                      <td className=\"px-6 py-4 text-gray-700\">\r\n                        {spot.probability}%\r\n                      </td>\r\n                      <td className=\"px-6 py-4 text-gray-700\">{spot.month}</td>\r\n                    </tr>\r\n                  ))\r\n              : null}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nTable.defaultProps = {\r\n  currentSort: \"default\",\r\n};\r\nexport default Table;\r\n","C:\\Users\\Popa Andrei\\Desktop\\kite-surfing\\kite\\src\\components\\Button.js",[],[],"C:\\Users\\Popa Andrei\\Desktop\\kite-surfing\\kite\\src\\components\\Login.js",[],[],{"ruleId":"61","severity":1,"message":"62","line":5,"column":35,"nodeType":"63","messageId":"64","endLine":5,"endColumn":41},{"ruleId":"61","severity":1,"message":"65","line":5,"column":43,"nodeType":"63","messageId":"64","endLine":5,"endColumn":48},{"ruleId":"61","severity":1,"message":"66","line":25,"column":27,"nodeType":"63","messageId":"64","endLine":25,"endColumn":45},{"ruleId":"61","severity":1,"message":"67","line":30,"column":10,"nodeType":"63","messageId":"64","endLine":30,"endColumn":17},{"ruleId":"61","severity":1,"message":"68","line":30,"column":19,"nodeType":"63","messageId":"64","endLine":30,"endColumn":29},{"ruleId":"69","severity":1,"message":"70","line":42,"column":6,"nodeType":"71","endLine":42,"endColumn":8,"suggestions":"72"},{"ruleId":"61","severity":1,"message":"73","line":165,"column":9,"nodeType":"63","messageId":"64","endLine":165,"endColumn":20},{"ruleId":"61","severity":1,"message":"74","line":1,"column":10,"nodeType":"63","messageId":"64","endLine":1,"endColumn":14},{"ruleId":"61","severity":1,"message":"75","line":3,"column":21,"nodeType":"63","messageId":"64","endLine":3,"endColumn":29},{"ruleId":"61","severity":1,"message":"76","line":4,"column":10,"nodeType":"63","messageId":"64","endLine":4,"endColumn":22},{"ruleId":"61","severity":1,"message":"77","line":4,"column":24,"nodeType":"63","messageId":"64","endLine":4,"endColumn":33},{"ruleId":"61","severity":1,"message":"78","line":5,"column":8,"nodeType":"63","messageId":"64","endLine":5,"endColumn":14},{"ruleId":"69","severity":1,"message":"79","line":36,"column":6,"nodeType":"71","endLine":36,"endColumn":8,"suggestions":"80"},{"ruleId":"61","severity":1,"message":"81","line":2,"column":10,"nodeType":"63","messageId":"64","endLine":2,"endColumn":26},{"ruleId":"61","severity":1,"message":"82","line":2,"column":28,"nodeType":"63","messageId":"64","endLine":2,"endColumn":42},{"ruleId":"61","severity":1,"message":"83","line":7,"column":10,"nodeType":"63","messageId":"64","endLine":7,"endColumn":20},{"ruleId":"69","severity":1,"message":"79","line":16,"column":6,"nodeType":"71","endLine":16,"endColumn":8,"suggestions":"84"},{"ruleId":"85","severity":1,"message":"86","line":96,"column":34,"nodeType":"87","messageId":"88","endLine":96,"endColumn":36},{"ruleId":"89","severity":1,"message":"90","line":98,"column":36,"nodeType":"91","messageId":"92","endLine":98,"endColumn":38},"no-unused-vars","'Marker' is defined but never used.","Identifier","unusedVar","'Popup' is defined but never used.","'setFilterValueWind' is assigned a value but never used.","'addSpot' is assigned a value but never used.","'setAddSpot' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'spot'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSpotTemp' needs the current value of 'spot'.","ArrayExpression",["93"],"'outerBounds' is assigned a value but never used.","'text' is defined but never used.","'useState' is defined but never used.","'MapContainer' is defined but never used.","'TileLayer' is defined but never used.","'Button' is defined but never used.","React Hook useEffect has missing dependencies: 'fetchSpots' and 'setSpots'. Either include them or remove the dependency array. If 'fetchSpots' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["94"],"'BsArrowDownShort' is defined but never used.","'BsArrowUpShort' is defined but never used.","'orderArrow' is assigned a value but never used.",["95"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},{"desc":"98","fix":"100"},"Update the dependencies array to be: [spot]",{"range":"101","text":"102"},"Update the dependencies array to be: [fetchSpots, setSpots]",{"range":"103","text":"104"},{"range":"105","text":"104"},[1371,1373],"[spot]",[1227,1229],"[fetchSpots, setSpots]",[492,494]]